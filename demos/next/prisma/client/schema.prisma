// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "./client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app", "auth"]
}

// Auth Schema -- based on examples provided with Auth.js
// https://authjs.dev/reference/adapter/prisma
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("auth")
}

/// Proompter Schema

model Message {
  id             String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  role           String
  type           String?
  content        String
  sequenceId     Int          @unique @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@schema("app")
}

model Conversation {
  id        String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  messages  Message[]
  user      ChatUser  @relation(fields: [userId], references: [id])
  userId    String
  flowId    String
  archived  Boolean   @default(false)
  error     Json?

  @@schema("app")
}

model ChatUser {
  id           String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  converations Conversation[]

  @@schema("app")
}
